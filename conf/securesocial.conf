securesocial {
  #
  # Where to redirect the user if SecureSocial can't figure that out from
  # the request that was received before authenticating the user
  #
    onLoginGoTo=/p

  #
  # Where to redirect the user when he logs out. If not set SecureSocial will redirect to the login page
  #
    onLogoutGoTo=/

  #
  # Enable SSL
  #
    ssl=false

  #
  # The controller class for assets. This is optional, only required
  # when you use a custom class for Assets.
  #
  # assetsController=controllers.ReverseMyCustomAssetsController
    cookie {
      #name=id
      #path=/
      #domain=some_domain
      #httpOnly=true
      #idleTimeoutInMinutes=30
      #absoluteTimeoutInMinutes=720
    }

    userpass {
      withUserNameSupport=false
      sendWelcomeEmail=true
      enableGravatarSupport=true
      signupSkipLogin=true
      tokenDuration=60
      tokenDeleteInterval=5
      minimumPasswordLength=8
      enableTokenJob=true
      hasher=bcrypt
    }

    # TODO move our credentials to system enviornment variables, it is bad to
    # expose our API keys like this.
    facebook {
      authorizationUrl="https://graph.facebook.com/oauth/authorize"
      accessTokenUrl="https://graph.facebook.com/oauth/access_token"
      clientId=457379041062822
      clientSecret=84e547df3ca10ec5b7e40fc031a5a8b2
      # this scope is the minimum SecureSocial requires. You can add more if required by your app.
      scope=email
    }

    #google {
    #  authorizationUrl="https://accounts.google.com/o/oauth2/auth"
    #  accessTokenUrl="https://accounts.google.com/o/auth/token"
    #  clientId=
    #  clientSecret=
    #  scope="https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email"

    #}

}
